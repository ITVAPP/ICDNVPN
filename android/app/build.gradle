// ============= android/app/build.gradle =============
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.1'
}

def kotlin_version = '1.9.0'

android {
    namespace "com.example.cfvpn"
    compileSdk = 35
    ndkVersion = "26.1.10909125"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        // 关键修改：添加 Flutter assets 目录，让原生代码能读取 geo 文件
        main.assets.srcDirs += ['../../assets']
    }

    defaultConfig {
        applicationId "com.example.cfvpn"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        
        // 只在不使用 split APK 时才设置 abiFilters
        // 这样可以同时支持 split-per-abi 和普通构建
        if (!project.hasProperty('split-per-abi')) {
            ndk {
                // 根据libv2ray.aar支持的架构，只包含主要架构
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }
    
    // 配置 APK 分割（可选）
    splits {
        abi {
            enable project.hasProperty('split-per-abi')
            reset()
            include 'armeabi-v7a', 'arm64-v8a'
            universalApk false
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
        }
    }
    
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
    }
    
    // 添加本地AAR文件支持
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    
    // 添加libv2ray.aar依赖
    implementation(name: 'libv2ray', ext: 'aar')
    
    // 添加协程支持
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // 添加Gson用于JSON处理
    implementation 'com.google.code.gson:gson:2.10.1'
}
