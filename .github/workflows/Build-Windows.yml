name: Build Windows Release
on:
  # 仅保留手动触发方式
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: false
        default: '1.0.0'
        type: string
jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build Windows app
      run: flutter build windows --release
    
    - name: Copy V2Ray core from project
      shell: pwsh
      run: |
        # 从项目目录复制V2Ray核心文件
        $sourcePath = "windows\runner\v2ray"
        $buildPath = "build\windows\x64\runner\Release\v2ray"
        
        # 创建目标目录
        New-Item -ItemType Directory -Force -Path $buildPath
        
        # 复制V2Ray核心文件
        if (Test-Path "$sourcePath\v2ray.exe") {
            Copy-Item "$sourcePath\v2ray.exe" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied v2ray.exe"
        } else {
            Write-Error "v2ray.exe not found in $sourcePath"
            exit 1
        }
        
        if (Test-Path "$sourcePath\geoip.dat") {
            Copy-Item "$sourcePath\geoip.dat" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied geoip.dat"
        } else {
            Write-Error "geoip.dat not found in $sourcePath"
            exit 1
        }
        
        if (Test-Path "$sourcePath\geosite.dat") {
            Copy-Item "$sourcePath\geosite.dat" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied geosite.dat"
        } else {
            Write-Error "geosite.dat not found in $sourcePath"
            exit 1
        }
        
        Write-Host "All required files copied successfully"
    
    - name: Package application
      shell: pwsh
      run: |
        # 获取版本号 - 优先使用手动输入的版本，否则使用分支名或标签名
        $version = "${{ github.event.inputs.version }}"
        if ([string]::IsNullOrEmpty($version)) {
            $version = "${{ github.ref_name }}".TrimStart("v")
        }
        
        $buildPath = "build\windows\x64\runner\Release"
        $outputName = "CFVPN-Windows-x64-$version"
        
        # 创建发布目录
        New-Item -ItemType Directory -Force -Path "release"
        
        # 创建带版本号的临时目录
        $tempDir = "release\$outputName"
        New-Item -ItemType Directory -Force -Path $tempDir
        
        # 复制所有必要文件到临时目录
        Write-Host "Copying application files..."
        
        # 复制主程序和运行时文件
        Copy-Item "$buildPath\*.exe" -Destination $tempDir -Force
        Copy-Item "$buildPath\*.dll" -Destination $tempDir -Force
        
        # 复制 flutter_assets 目录（必要的资源文件）
        if (Test-Path "$buildPath\data\flutter_assets") {
            Copy-Item "$buildPath\data" -Destination $tempDir -Recurse -Force
            Write-Host "✓ Copied flutter_assets"
        }
        
        # 复制 v2ray 目录
        if (Test-Path "$buildPath\v2ray") {
            Copy-Item "$buildPath\v2ray" -Destination $tempDir -Recurse -Force
            Write-Host "✓ Copied v2ray directory"
        }
        
        # 复制其他必要文件（如果存在）
        if (Test-Path "$buildPath\*.json") {
            Copy-Item "$buildPath\*.json" -Destination $tempDir -Force
        }
        
        # 创建压缩包（包含版本号文件夹）
        Write-Host "Creating archive..."
        Compress-Archive -Path $tempDir -DestinationPath "release\$outputName.zip" -Force
        
        # 清理临时目录
        Remove-Item -Path $tempDir -Recurse -Force
        
        Write-Host "Package created: $outputName.zip"
        Write-Host "Archive structure: $outputName/[application files]"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CFVPN-Windows-x64-${{ github.event.inputs.version || github.ref_name }}
        path: release/*.zip
    
    - name: Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

