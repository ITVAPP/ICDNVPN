name: Build Windows Release
on:
  # 仅保留手动触发方式
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: false
        default: '1.0.0'
        type: string
jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build Windows app
      run: flutter build windows --release
    
    - name: Copy V2Ray core and geo files
      shell: pwsh
      run: |
        $buildPath = "build\windows\x64\runner\Release\v2ray"
        
        # 创建目标目录
        New-Item -ItemType Directory -Force -Path $buildPath
        
        # 复制 V2Ray 可执行文件（从 windows/runner/v2ray）
        $v2rayExePath = "windows\runner\v2ray\v2ray.exe"
        if (Test-Path $v2rayExePath) {
            Copy-Item $v2rayExePath -Destination "$buildPath\" -Force
            Write-Host "✓ Copied v2ray.exe"
        } else {
            Write-Error "v2ray.exe not found in $v2rayExePath"
            exit 1
        }
        
        # 复制 geo 文件（从 assets 目录）
        $assetsPath = "assets"
        
        # 复制 geoip.dat
        if (Test-Path "$assetsPath\geoip.dat") {
            Copy-Item "$assetsPath\geoip.dat" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied geoip.dat from assets"
        } else {
            Write-Error "geoip.dat not found in $assetsPath"
            exit 1
        }
        
        # 复制 geosite.dat
        if (Test-Path "$assetsPath\geosite.dat") {
            Copy-Item "$assetsPath\geosite.dat" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied geosite.dat from assets"
        } else {
            Write-Error "geosite.dat not found in $assetsPath"
            exit 1
        }
        
        # 复制 geoip-only-cn-private.dat（如果存在）
        if (Test-Path "$assetsPath\geoip-only-cn-private.dat") {
            Copy-Item "$assetsPath\geoip-only-cn-private.dat" -Destination "$buildPath\" -Force
            Write-Host "✓ Copied geoip-only-cn-private.dat from assets"
        } else {
            Write-Host "⚠ geoip-only-cn-private.dat not found (optional)"
        }
        
        Write-Host "All required files copied successfully"
    
    - name: Clean duplicate geo files from flutter_assets
      shell: pwsh
      run: |
        # 删除 flutter_assets 中的重复 geo 文件以减小包体积
        $flutterAssetsPath = "build\windows\x64\runner\Release\data\flutter_assets\assets"
        
        if (Test-Path $flutterAssetsPath) {
            Write-Host "清理 flutter_assets 中的重复 geo 文件..."
            
            # 定义要删除的 geo 文件列表
            $geoFiles = @("geoip.dat", "geosite.dat", "geoip-only-cn-private.dat")
            $totalSaved = 0
            
            foreach ($file in $geoFiles) {
                $filePath = Join-Path $flutterAssetsPath $file
                if (Test-Path $filePath) {
                    $fileSize = (Get-Item $filePath).Length
                    Remove-Item $filePath -Force
                    $totalSaved += $fileSize
                    Write-Host "  ✓ 已删除: $file ($('{0:N2} MB' -f ($fileSize / 1MB)))"
                }
            }
            
            if ($totalSaved -gt 0) {
                Write-Host "✓ 清理完成，共节省空间: $('{0:N2} MB' -f ($totalSaved / 1MB))"
            } else {
                Write-Host "✓ 没有找到需要清理的 geo 文件"
            }
        } else {
            Write-Host "⚠ flutter_assets 目录不存在，跳过清理"
        }
        
        # 验证 v2ray 目录中的 geo 文件是否存在
        $v2rayPath = "build\windows\x64\runner\Release\v2ray"
        if (Test-Path $v2rayPath) {
            Write-Host "`n验证 v2ray 目录中的 geo 文件:"
            $v2rayGeoFiles = Get-ChildItem -Path $v2rayPath -Filter "*.dat"
            if ($v2rayGeoFiles.Count -gt 0) {
                foreach ($file in $v2rayGeoFiles) {
                    Write-Host "  ✓ $($file.Name) ($('{0:N2} MB' -f ($file.Length / 1MB)))"
                }
            } else {
                Write-Error "错误：v2ray 目录中没有找到 geo 文件！"
                exit 1
            }
        } else {
            Write-Error "错误：v2ray 目录不存在！"
            exit 1
        }
    
    - name: Package application
      shell: pwsh
      run: |
        # 获取版本号 - 优先使用手动输入的版本，否则使用分支名或标签名
        $version = "${{ github.event.inputs.version }}"
        if ([string]::IsNullOrEmpty($version)) {
            $version = "${{ github.ref_name }}".TrimStart("v")
        }
        
        $buildPath = "build\windows\x64\runner\Release"
        $outputName = "CFVPN-Windows-x64-$version"
        
        # 创建发布目录
        New-Item -ItemType Directory -Force -Path "release"
        
        # 创建带版本号的临时目录
        $tempDir = "release\$outputName"
        New-Item -ItemType Directory -Force -Path $tempDir
        
        # 复制所有必要文件到临时目录
        Write-Host "Copying application files..."
        
        # 复制主程序和运行时文件
        Copy-Item "$buildPath\*.exe" -Destination $tempDir -Force
        Copy-Item "$buildPath\*.dll" -Destination $tempDir -Force
        
        # 复制 flutter_assets 目录（必要的资源文件）
        if (Test-Path "$buildPath\data\flutter_assets") {
            Copy-Item "$buildPath\data" -Destination $tempDir -Recurse -Force
            Write-Host "✓ Copied flutter_assets"
        }
        
        # 复制 v2ray 目录
        if (Test-Path "$buildPath\v2ray") {
            Copy-Item "$buildPath\v2ray" -Destination $tempDir -Recurse -Force
            Write-Host "✓ Copied v2ray directory"
        }
        
        # 复制其他必要文件（如果存在）
        if (Test-Path "$buildPath\*.json") {
            Copy-Item "$buildPath\*.json" -Destination $tempDir -Force
        }
        
        # 创建压缩包（包含版本号文件夹）
        Write-Host "Creating archive..."
        Compress-Archive -Path $tempDir -DestinationPath "release\$outputName.zip" -Force
        
        # 清理临时目录
        Remove-Item -Path $tempDir -Recurse -Force
        
        Write-Host "Package created: $outputName.zip"
        Write-Host "Archive structure: $outputName/[application files]"
        
        # 显示最终包大小
        $zipSize = (Get-Item "release\$outputName.zip").Length
        Write-Host "Package size: $('{0:N2} MB' -f ($zipSize / 1MB))"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CFVPN-Windows-x64-${{ github.event.inputs.version || github.ref_name }}
        path: release/*.zip
    
    - name: Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
