name: Build Android APK
on:
  workflow_dispatch:  # 仅手动触发
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
    
    - name: Check libv2ray.aar existence and content
      run: |
        echo "===== Checking libv2ray.aar ====="
        
        # 检查文件是否存在
        if [ -f "android/app/libs/libv2ray.aar" ]; then
          echo "✅ libv2ray.aar found"
          
          # 显示文件信息
          echo ""
          echo "File information:"
          ls -lh android/app/libs/libv2ray.aar
          
          # 显示文件大小（人类可读）
          FILE_SIZE=$(du -h android/app/libs/libv2ray.aar | cut -f1)
          echo "File size: $FILE_SIZE"
          
          # 检查文件大小（字节）
          SIZE_BYTES=$(stat -c%s android/app/libs/libv2ray.aar)
          if [ "$SIZE_BYTES" -lt 1000000 ]; then
            echo "⚠️ WARNING: AAR file seems too small (less than 1MB)"
          fi
          
          # 解压并检查内容
          echo ""
          echo "AAR contents:"
          unzip -l android/app/libs/libv2ray.aar
          
          # 创建临时目录解压
          mkdir -p /tmp/aar_check
          cd /tmp/aar_check
          cp $GITHUB_WORKSPACE/android/app/libs/libv2ray.aar ./
          unzip -q libv2ray.aar
          
          # 检查必要文件
          echo ""
          echo "Checking required files:"
          
          if [ -f "classes.jar" ]; then
            echo "✅ classes.jar found"
            
            # 检查classes.jar大小
            JAR_SIZE=$(ls -lh classes.jar | awk '{print $5}')
            echo "   Size: $JAR_SIZE"
            
            # 列出包含的类
            echo ""
            echo "Java/Kotlin classes in AAR:"
            jar tf classes.jar | head -20
            
            # 搜索必需的类
            echo ""
            echo "Searching for required classes:"
            
            # 检查 V2RayPoint
            if jar tf classes.jar | grep -q "V2RayPoint"; then
              echo "✅ V2RayPoint class found"
              jar tf classes.jar | grep "V2RayPoint"
            else
              echo "❌ V2RayPoint class NOT found"
            fi
            
            # 检查 V2RayVPNServiceSupportsSet
            if jar tf classes.jar | grep -q "V2RayVPNServiceSupportsSet"; then
              echo "✅ V2RayVPNServiceSupportsSet interface found"
              jar tf classes.jar | grep "V2RayVPNServiceSupportsSet"
            else
              echo "❌ V2RayVPNServiceSupportsSet interface NOT found"
            fi
            
            # 检查包名
            echo ""
            echo "Package structure:"
            jar tf classes.jar | grep "libv2ray" | head -10
            
            # 统计类的数量
            CLASS_COUNT=$(jar tf classes.jar | grep "\.class$" | wc -l)
            echo ""
            echo "Total classes in JAR: $CLASS_COUNT"
            
            if [ "$CLASS_COUNT" -lt 5 ]; then
              echo "⚠️ WARNING: Very few classes in JAR (less than 5)"
            fi
            
          else
            echo "❌ classes.jar NOT found in AAR"
            echo "AAR structure:"
            ls -la
            exit 1
          fi
          
          # 检查 AndroidManifest.xml
          if [ -f "AndroidManifest.xml" ]; then
            echo ""
            echo "✅ AndroidManifest.xml found"
          else
            echo "❌ AndroidManifest.xml NOT found"
          fi
          
          # 检查 JNI 库
          echo ""
          echo "Checking for JNI libraries:"
          if [ -d "jni" ]; then
            echo "JNI libraries found:"
            find jni -name "*.so" -type f | head -10
            
            # 统计各架构的库
            for arch in armeabi-v7a arm64-v8a x86 x86_64; do
              COUNT=$(find jni -path "*/$arch/*.so" 2>/dev/null | wc -l)
              if [ "$COUNT" -gt 0 ]; then
                echo "  $arch: $COUNT libraries"
              fi
            done
          else
            echo "No JNI directory found"
          fi
          
          # 返回原目录
          cd $GITHUB_WORKSPACE
          
        else
          echo "❌ ERROR: libv2ray.aar NOT found at android/app/libs/"
          echo ""
          echo "Checking android/app/libs directory:"
          if [ -d "android/app/libs" ]; then
            echo "Directory exists. Contents:"
            ls -la android/app/libs/
          else
            echo "Directory android/app/libs does not exist!"
            echo "Creating directory..."
            mkdir -p android/app/libs
          fi
          
          echo ""
          echo "Searching for AAR files in the project:"
          find . -name "*.aar" -type f 2>/dev/null | head -10
          
          echo ""
          echo "ERROR: Build cannot proceed without libv2ray.aar"
          exit 1
        fi
        
        echo ""
        echo "===== AAR Check Complete ====="
    
    - name: Validate AAR is properly configured in Gradle
      run: |
        echo "Checking Gradle configuration..."
        
        # 检查 build.gradle 中的 AAR 引用
        if grep -q "libv2ray" android/app/build.gradle; then
          echo "✅ libv2ray reference found in build.gradle"
          echo "Configuration:"
          grep -A2 -B2 "libv2ray" android/app/build.gradle
        else
          echo "⚠️ WARNING: libv2ray not referenced in build.gradle"
        fi
        
        # 检查 libs 目录配置
        if grep -q "flatDir\|dirs.*libs" android/app/build.gradle; then
          echo "✅ libs directory configured in repositories"
        else
          echo "⚠️ WARNING: libs directory may not be properly configured"
        fi
    
    - name: Fix gradlew permissions
      run: |
        sed -i 's/\r$//' android/gradlew
        chmod +x android/gradlew
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Clean build cache
      run: |
        cd android
        ./gradlew clean
        ./gradlew --stop
        rm -rf ~/.gradle/caches/transforms-*
        rm -rf ~/.gradle/caches/build-cache-*
    
    - name: Build APK (with detailed error logging)
      run: |
        echo "Starting build process..."
        
        # 先尝试编译 Kotlin 代码以获取详细错误
        cd android
        ./gradlew :app:compileReleaseKotlin --stacktrace --info 2>&1 | tee compile_log.txt || true
        
        # 如果编译失败，显示相关错误
        if [ $? -ne 0 ]; then
          echo ""
          echo "===== Kotlin Compilation Errors ====="
          grep -A5 -B5 "Unresolved reference" compile_log.txt || true
          grep -A5 -B5 "error:" compile_log.txt | head -50 || true
        fi
        
        cd ..
        
        # 继续构建 APK
        flutter build apk --release --split-per-abi --target-platform android-arm,android-arm64 --verbose
        
        # 如果需要，构建通用 APK
        flutter build apk --release --target-platform android-arm,android-arm64
    
    - name: List build outputs
      if: success()
      run: |
        echo "Build outputs:"
        ls -lh build/app/outputs/flutter-apk/
        
        # 显示 APK 大小
        echo ""
        echo "APK sizes:"
        du -h build/app/outputs/flutter-apk/*.apk
    
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: apk-release
        path: build/app/outputs/flutter-apk/*.apk
    
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          android/compile_log.txt
          android/app/build/reports/
          android/app/build/outputs/logs/
